{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Score/index.js","components/Message/index.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","alt","src","image","onClick","markIt","id","Wrapper","children","Title","Score","Message","App","state","giphys","marked","resultMessage","score","topScore","randomize","array","i","length","j","Math","floor","random","_ref","_this","setState","this","_this2","components_Wrapper","components_Title","components_Message","components_Score","map","friend","components_FriendCard","key","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"kuCAgBeA,MAbf,SAAoBC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,oBAAoBC,IAAKN,EAAMO,SAE1CN,EAAAC,EAAAC,cAAA,OAAKK,QAAS,kBAAMR,EAAMS,OAAOT,EAAMU,KAAKN,UAAU,SAAtD,kBCFSO,MAJf,SAAiBX,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMY,iBCG1BC,MAJf,SAAeb,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMY,wBCGvBE,MAJf,SAAed,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMY,iBCGvBG,MAJf,SAAiBf,GACf,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWJ,EAAMY,WCsGzBI,6MA5FbC,MAAQ,CACNC,SAEAC,OAAS,EACTC,cAAe,iCACfC,MAAQ,EACRC,SAAU,KASdC,UAAY,SAAAC,GACV,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADDM,EAElB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkCM,EAAA,GAE9BP,EAAMG,GAFwBI,EAAA,GAI3C,OAAOP,KAIPf,OAAS,SAAAC,GAaCsB,EAAKf,MAAME,OAAST,IAAO,GAE7BsB,EAAKC,SAAS,CACdd,OAAS,GACTE,MAAQ,EACRD,cAAe,uBAEjBY,EAAKT,UAAUS,EAAKf,MAAMC,UAMrBc,EAAKf,MAAMI,QAAUW,EAAKf,MAAMK,UACnCU,EAAKC,SAAS,CACZX,SAAUU,EAAKf,MAAMI,MAAQ,IAIjCW,EAAKC,SAAS,CAEZd,OAAQa,EAAKf,MAAME,OAAST,EAE5BW,MAAOW,EAAKf,MAAMI,MAAQ,EAE1BD,cAAe,sBAIjBY,EAAKT,UAAUS,EAAKf,MAAMC,6FAvDhCgB,KAAKD,SAAS,CAACf,OAAQgB,KAAKX,UAAUW,KAAKjB,MAAMC,2CA6DxC,IAAAiB,EAAAD,KACP,OACEjC,EAAAC,EAAAC,cAACiC,EAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAD,wBACApC,EAAAC,EAAAC,cAACmC,EAAD,KAAUJ,KAAKjB,MAAMG,eACrBnB,EAAAC,EAAAC,cAACmC,EAAD,kDACArC,EAAAC,EAAAC,cAACoC,EAAD,qBAAqBL,KAAKjB,MAAMI,MAAhC,2BAA0Da,KAAKjB,MAAMK,UACpEY,KAAKjB,MAAMC,OAAOsB,IAAI,SAAAC,GAAM,OAC3BxC,EAAAC,EAAAC,cAACuC,EAAD,CACEjC,OAAQ0B,EAAK1B,OACbC,GAAI+B,EAAO/B,GACXiC,IAAKF,EAAO/B,GACZH,MAAOkC,EAAOlC,kBA1FRqC,mBCHlBC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.b1705a12.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt=\"giphy gif sticker\" src={props.image} />\n      </div>\n      <div onClick={() => props.markIt(props.id)} className=\"guess\">\n      ⬚\n      </div>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Score(props) {\n  return <h2 className=\"score\">{props.children}</h2>;\n}\n\nexport default Score;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Message(props) {\n  return <h3 className=\"message\">{props.children}</h3>;\n}\n\nexport default Message;\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport giphys from \"./giphys.json\";\nimport Score from \"./components/Score\";\nimport Message from \"./components/Message\";\n\nclass App extends Component {\n  // Setting this.state.giphys to the giphys json array\n  //same as giphys : giphys\n  //when defining object properties with ES6, \n  //if the object's key and value have the same name, \n  //we can omit the colon — this is just an optional shorthand syntax.\n  state = {\n    giphys,\n    //my logic is based on prime numbers, so we start with marked being equal to a unique prime number.\n    marked : 2,\n    resultMessage: \"Pick any character to start...\",\n    score : 0,\n    topScore: 0\n  };\n\n//once everything is all locked & loaded, we gotta roll the dice!\ncomponentDidMount(){\n  this.setState({giphys: this.randomize(this.state.giphys)});\n}\n\n//randomize an array to shuffle the order of the cards.\nrandomize = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\n    //On each click of a card...\n  markIt = id => {\n\n      //Testing: logs the id of the clicked card.\n      //All card ids are unique prime numbers.\n      // console.log(id)\n\n      //Testing: multiply the marked state by the id. \n      // this.setState({marked: this.state.marked * id})\n\n      //Testing: divide the marked state by the id. if the remainder is 0, it's a number/id that has already been used.\n      // console.log(this.state.marked % id)\n\n    //   // you chose a card that you chose already - GAME OVER\n        if (this.state.marked % id === 0) {\n    //       //reset the marked array to an empty array, set score to 0\n          this.setState({\n          marked : 43, \n          score : 0, \n          resultMessage: \"You guessed wrong.\"})\n    //     //Shuffle the cards and re-render\n        this.randomize(this.state.giphys);  \n\n    //     //otherwise, you must have chosen a new character\n      } else {\n\n         //increment top score if necessary\n         if (this.state.score === this.state.topScore) {\n          this.setState({\n            topScore: this.state.score + 1\n          })\n        }       \n        //You guessed right! Game on, my friend. \n        this.setState({\n    //     //store the id of the character you chose in the marked array\n          marked: this.state.marked * id,\n    //       //increment your score\n          score: this.state.score + 1,\n    //       //display positive message\n          resultMessage: \"You got it right!\"\n        })\n\n    //     //Shuffle the cards and re-render\n        this.randomize(this.state.giphys);  \n\n    }\n  };\n\n \n  render() {\n    return (\n      <Wrapper>\n        <Title>'Member Giphys!</Title>\n        <Message>{this.state.resultMessage}</Message>\n        <Message>Just don't pick the same character twice.</Message>\n        <Score>'Memberized: {this.state.score}  ▩  Bestest Ever: {this.state.topScore}</Score>\n        {this.state.giphys.map(friend => (\n          <FriendCard\n            markIt={this.markIt}\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}